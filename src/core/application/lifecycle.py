import logging
import time
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager
from typing import Any

from fastapi import FastAPI

from src.core.config import Settings


def create_lifespan(logger: logging.Logger, settings: Settings) -> Any:
    """–°–æ–∑–¥–∞–µ—Ç lifespan —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    @asynccontextmanager
    async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
        # Startup
        start_time = time.time()
        app.state.start_time = start_time

        try:
            logger.info("üöÄ EORA Q&A —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
            logger.info("üîß Debug —Ä–µ–∂–∏–º: %s", settings.debug)
            logger.info("üåê API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞: %s", settings.api_str)

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î, –∫–µ—à–∞ –∏ —Ç.–¥.

            yield

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            raise
        finally:
            # Shutdown
            uptime = time.time() - app.state.start_time
            logger.info(
                "‚èπÔ∏è EORA Q&A —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %.2f —Å–µ–∫)", uptime
            )

    return lifespan
