# ============================================================================
# КОНФИГУРАЦИЯ RUFF - БЫСТРЫЙ ЛИНТЕР И ФОРМАТТЕР
# ============================================================================

# === БАЗОВЫЕ НАСТРОЙКИ ===
target-version = "py312"               # Целевая версия Python для правил совместимости
line-length = 79                       # Максимальная длина строки (79 = PEP 8, 88 = Black стандарт)

# ============================================================================
# НАСТРОЙКИ ЛИНТИНГА
# ============================================================================

[lint]
# === ПОДДЕРЖКА UNICODE ===
# Разрешенные путающие символы (кириллица в комментариях, математические символы)
allowed-confusables = [
    "−", "ρ", "∗",                      # Математические символы
    # Кириллические буквы (весь русский алфавит)
    "а", "б", "в", "г", "д", "е", "ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я",
    "А", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я"
]

# === ВКЛЮЧЕННЫЕ ПРАВИЛА ПРОВЕРКИ ===
select = [
    # ОСНОВНЫЕ ПРОВЕРКИ
    "E",   # pycodestyle errors - ошибки стиля кода по PEP 8
    "W",   # pycodestyle warnings - предупреждения о стиле кода
    "F",   # pyflakes - поиск неиспользуемых импортов, переменных, синтаксических ошибок

    # КАЧЕСТВО КОДА
    "I",   # isort - правильная сортировка и группировка импортов
    "B",   # flake8-bugbear - поиск вероятных багов и анти-паттернов Python
    "C4",  # flake8-comprehensions - улучшение list/dict/set comprehensions
    "UP",  # pyupgrade - модернизация синтаксиса для новых версий Python

    # ОПТИМИЗАЦИЯ
    "ARG", # flake8-unused-arguments - поиск неиспользуемых аргументов функций
    "SIM", # flake8-simplify - упрощение сложных конструкций кода
    "TCH", # flake8-type-checking - оптимизация TYPE_CHECKING импортов
    "RET", # flake8-return - проверки корректности return statements
    "PIE", # flake8-pie - удаление ненужного кода (pie = pointless import extensions)

    # РЕФАКТОРИНГ
    "PLR", # pylint refactor - обнаружение code smells и предложения по рефакторингу
    "RUF", # ruff-specific - уникальные правила, специфичные для Ruff
]

# === ИГНОРИРУЕМЫЕ ПРАВИЛА ===
ignore = [
    # ФОРМАТИРОВАНИЕ (обрабатывается автоматически)

    # FASTAPI СПЕЦИФИЧНЫЕ
    "B008",    # Разрешить вызовы функций в аргументах по умолчанию (нужно для Depends())

    # ОБРАБОТКА ОШИБОК
    "B904",    # Разрешить raise без from в except блоках (иногда уместно)

    # СЛОЖНОСТЬ КОДА (может быть оправдана в API)
    "PLR0913", # Слишком много аргументов в функции (часто нужно для API endpoints)
    "PLR2004", # Магические константы в коде (иногда приемлемо для конфигурации)
    "PLR0911", # Слишком много return statements (может быть оправдано)
    "PLR0912", # Слишком много ветвлений if/else (может быть оправдано)
]

# === ИСКЛЮЧЕНИЯ ИЗ ПРОВЕРКИ ===
exclude = [
    ".venv",        # Виртуальное окружение Python
    "alembic",      # Автогенерируемые миграции базы данных
    "__pycache__",  # Кеш скомпилированного Python кода
    ".git",         # Git репозиторий и история
    ".mypy_cache",  # Кеш результатов проверки типов MyPy
    ".ruff_cache",  # Кеш результатов проверки Ruff
]

# === НАСТРОЙКИ СОРТИРОВКИ ИМПОРТОВ ===
[lint.isort]
known-first-party = ["app"]              # Модули нашего проекта (для правильной группировки импортов)
split-on-trailing-comma = true           # Разделять импорты на отдельные строки при наличии запятой

# === НАСТРОЙКИ МОДЕРНИЗАЦИИ СИНТАКСИСА ===
[lint.pyupgrade]
keep-runtime-typing = true               # Сохранять типизацию во время выполнения (для Pydantic и FastAPI)

# ============================================================================
# НАСТРОЙКИ ФОРМАТИРОВАНИЯ КОДА
# ============================================================================

[format]
quote-style = "double"                   # Использовать двойные кавычки для строк ("text")
indent-style = "space"                   # Использовать пробелы вместо табуляции для отступов
skip-magic-trailing-comma = false        # Добавлять "магическую" запятую в конце (совместимость с Black)
line-ending = "auto"                     # Автоматическое определение окончаний строк (LF/CRLF)
