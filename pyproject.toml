# ============================================================================
# КОНФИГУРАЦИЯ ПРОЕКТА
# ============================================================================

[project]
name = "ai_eora_question_answer"       # Имя проекта для PyPI и pip
version = "0.1.0"                      # Семантическая версия проекта (major.minor.patch)
description = "EORA Q&A"               # Краткое описание назначения проекта
readme = "README.md"                   # Путь к файлу с подробной документацией
requires-python = ">=3.12"             # Минимальная версия Python для совместимости

# ============================================================================
# ЗАВИСИМОСТИ PRODUCTION (ОБЯЗАТЕЛЬНЫЕ ДЛЯ РАБОТЫ ПРИЛОЖЕНИЯ)
# ============================================================================

dependencies = [
    # === WEB FRAMEWORK & SERVER ===
    "fastapi>=0.115.12",    # Современный веб-фреймворк для создания API с автодокументацией
    "uvicorn>=0.34.3",      # ASGI сервер для запуска FastAPI приложений в production
    "pydantic>=2.11.5",     # Валидация данных и настроек с помощью Python типов
    # === PARSING & HTTP CLIENT ===
    "httpx>=0.28.1",        # HTTP клиент для асинхронных запросов к внешним API
    "beautifulsoup4>=4.13.4", # Парсинг HTML и XML документов (замена lxml для простоты)
    # === AI & MACHINE LEARNING ===
    "anthropic>=0.40.0",  # Клиент для работы с Anthropic LLM API
    "langchain>=0.3.20",         # Framework для работы с LLM и RAG
    "langchain-community>=0.3.20", # Дополнительные компоненты LangChain
    "langchain-anthropic>=0.3.0", # Anthropic интеграция для LangChain
    "sentence-transformers>=3.3.1", # Модели для создания векторных представлений
    "pgvector>=0.3.6",          # PostgreSQL расширение для векторного поиска
    "tiktoken>=0.8.0",           # Токенизатор для подсчета токенов
    # === DATABASE & ORM ===
    "sqlalchemy>=2.0.41",      # ORM для работы с реляционными базами данных
    "alembic>=1.16.1",         # Система миграций БД для версионирования схемы
    "asyncpg>=0.30.0",         # Асинхронный драйвер для PostgreSQL (высокая производительность)
    "psycopg2-binary>=2.9.10", # Синхронный драйвер PostgreSQL (совместимость с SQLAlchemy)
    "greenlet>=3.2.3",         # Поддержка асинхронных операций в SQLAlchemy
    # === VALIDATION & UTILITIES ===
    "email-validator>=2.2.0",   # Валидация email адресов по RFC стандартам
    "python-multipart>=0.0.20", # Обработка multipart/form-data для загрузки файлов
    "pydantic-settings>=2.9.1", # Управление настройками приложения через Pydantic
    # === SECURITY & AUTHENTICATION ===
    "bcrypt>=4.3.0",                     # Безопасное хеширование паролей с солью
    "python-jose>=3.5.0",                # Создание и проверка JWT токенов
    "types-python-jose>=3.5.0.20250531", # Типы для статической проверки python-jose
    # === LOGGING ===
    "python-json-logger>=2.0.7", # Структурированное JSON логирование для мониторинга
]

# ============================================================================
# ГРУППЫ ЗАВИСИМОСТЕЙ ПО НАЗНАЧЕНИЮ
# ============================================================================

[dependency-groups]

# === РАЗРАБОТКА И КАЧЕСТВО КОДА ===
dev = [
    "ruff>=0.11.13",              # Быстрый линтер и форматтер кода (замена flake8 + black)
    "mypy>=1.13.0",               # Статическая проверка типов для предотвращения ошибок
    "ty>=0.0.1a13",               # Альтернативная статическая проверка типов (аналог mypy)
    "pre-commit>=3.6.0",          # Git hooks для автоматической проверки кода перед коммитом
    "psycopg2-binary>=2.9.10",    # Дублирование для dev окружения
]

# === ТЕСТИРОВАНИЕ ===
test = [
    "pytest>=8.4.0",                   # Современный фреймворк для написания и запуска тестов
    "pytest-asyncio>=1.0.0",           # Поддержка тестирования асинхронного кода
    "pytest-cov>=6.0.0",               # Измерение покрытия кода тестами с отчетами
]

# ============================================================================
# ПРИМЕЧАНИЯ ПО КОНФИГУРАЦИИ ИНСТРУМЕНТОВ
# ============================================================================
#
# Конфигурации инструментов вынесены в отдельные файлы:
# - ruff.toml    - Настройки Ruff (линтер и форматтер)
# - mypy.ini     - Настройки MyPy (проверка типов)
# - ty.toml      - Настройки Ty (альтернативная проверка типов)
#
# Это улучшает читаемость и позволяет каждому инструменту
# иметь свою собственную конфигурацию.
# ============================================================================
